package com.example.tests;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import static org.testng.Assert.assertEquals;

import org.testng.annotations.Test;

@Test
public class ContactCreationTests extends TestBase {

	@Override
	public  Iterator<Object[]> randomValidContactGenerator() {
		List<Object[]> list = new ArrayList<Object[]>();

		for (int i = 0; i < 5; i++) {
			ContactData contact = new ContactData();
			contact.firstname = generateRandomString();
			contact.lastname = generateRandomString();
			contact.address = generateRandomString();
			contact.address2 = generateRandomString();
			contact.email = generateRandomString();
			contact.email2 = generateRandomString();
			contact.home = generateRandomString();
			contact.mobile = generateRandomString();
			contact.phone2 = generateRandomString();
			contact.work = generateRandomString();

			contact.bday = generateRandomDayOfBirth();
			contact.byear = generateRandomYearOfBirth();
			contact.bmonth = generateRandomMonthOfBirth();

			contact.group = null;
			list.add(new Object[] { contact });
		}
		return list.iterator();
	}

	@Test(dataProvider = "randomvalidContactGenerator")
	public void testContactCreationwithValidData(ContactData contact) throws Exception {
		app.getNavigationHelper().openMainPage();

		// save old state
		List<ContactData> oldList = app.getContactHelper().getContacts();

		// actions
		app.getContactHelper().initContactCreation();
		app.getContactHelper().fillContactForm(contact);
		app.getGroupHelper().submitContactCreation();
		app.getGroupHelper().returnToMainPage();

		// save new state
		List<ContactData> newList = app.getContactHelper().getContacts();

		// compare states
		oldList.add(contact);
		Collections.sort(oldList);
		assertEquals(newList, oldList);
	}

}
